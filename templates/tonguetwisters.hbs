<style>
  /****************************************
   * BACK BUTTON
   ****************************************/
  .back-btn {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    color: #333;
    border: none;
    padding: 8px 8px;
    font-size: 16px;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    font-weight: bold;
    margin-bottom: 20px;
  }
  .back-btn:hover {
    background-color: #e0e0e0;
    transform: translateX(-3px);
  }
  .back-btn::before {
    content: "‚Æê";
    margin-right: 8px;
    font-size: 18px;
  }

  /****************************************
   * HEADER CONTAINER
   ****************************************/
  .header-container {
    background-color: #FF7878;
    padding: 20px;
    border-radius: 20px;
    width: fit-content;
    text-align: center;
    margin-top: 10px;
    margin-bottom: 10px;
    margin-left: 330px; /* adjust or remove if not needed */
  }
  .header-container h1 {
    color: white;
    margin: 0;
  }
  .header-container h6 {
    color: white;
    font-style: italic;
    opacity: 0.75;
    margin-top: 5px;
  }

  /****************************************
   * MAIN (GAME) CONTAINER
   ****************************************/
  .game-container {
    position: relative;
    max-width: 600px; /* adjust as needed */
    width: 100%;
    padding: 20px;
    margin: 0 auto;
    background: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    border-radius: 8px;
  }

  /* Left side area with the avatar and quote */
  .left-side {
    width: 300px; /* adjust as needed */
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-right: 20px;
  }
  .avatar {
    width: 250px;
    height: auto;
  }
  .twist-quote {
    color: #002769;
    font-style: italic;
    font-size: 15px;
    text-align: center;
    margin-top: 5px;
  }

  /* The right side where the tongue twisters themselves go */
  .twister-content {
    flex: 1;
  }

  /****************************************
   * TONGUE TWISTER CARDS
   ****************************************/
  .twister {
    margin: 15px 0;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #fff;
  }
  .twister-text {
    color: #002769;
    font-style: italic;
    font-size: large;
  }

  .button-container {
    margin-top: 10px;
    display: flex;
    justify-content: center;
    gap: 10px;
  }

  /****************************************
   * DISTINCT BUTTON CLASSES
   ****************************************/
  /* Record button: a deeper, vibrant red */
  .record-btn {
    background-color: #2c3e50;
    color: white;
    border: none;
    border-radius: 5px;
    margin: 5px;
    padding: 10px;
    font-size: 14px;
    cursor: pointer;
  }
  .record-btn:hover {
    background-color: #e0e0e0; /* darker on hover */
  }

  /* Play button: a lighter pinkish red */
  .play-btn {
    background-color: #2c3e50;
    color: white;
    border: none;
    border-radius: 5px;
    margin: 5px;
    padding: 10px;
    font-size: 14px;
    cursor: pointer;
  }
  .play-btn:hover {
    background-color: #e0e0e0; /* darker on hover */
  }
</style>

<!-- Back Button -->
<button onclick="loadPage('aphasiagameselection')" class="back-btn">
  Back to Aphasia Unit
</button>

<!-- Header Section -->
<div class="header-container">
  <h1>Tongue Twisters Game</h1>
  <h6>Sharpen your Tongue</h6>
</div>

<!-- Main Container for the Tongue Twisters -->
<div class="game-container">
  <!-- Left Side with Avatar -->
  <div class="left-side">
    <img src="avatar-tonguetwisters.png" alt="Avatar" class="avatar">
    <h6 class="twist-quote">"To twist is to sharpen. Do the twist!"</h6>
  </div>

  <!-- Right Side: Actual Twister Content -->
  <div class="twister-content">
    <div id="twisters-container"></div>
  </div>
</div>

<script>
  // -------------- JAVASCRIPT LOGIC --------------
  const tongueTwisters = [
    "She sells sea shells by the seashore.",
    "How can a clam cram in a clean cream can?",
    "Peter Piper picked a peck of pickled peppers.",
    "Fuzzy Wuzzy was a bear. Fuzzy Wuzzy had no hair.",
    "A tutor who tooted the flute tried to tutor two tooters to toot."
  ];

  const twistersContainer = document.getElementById("twisters-container");
  const recordings = {};
  let mediaRecorder;
  let audioChunks = {};
  let isRecording = {}; // Track recording state per sentence
  let recognition;
  let audioStream; // Store the audio stream to prevent multiple permission prompts

  function initGame() {
    tongueTwisters.forEach((twister, index) => {
      const div = document.createElement("div");
      div.classList.add("twister");
      div.innerHTML = `
        <p class="twister-text">"${twister}"</p>
        <div class="button-container">
          <!-- Record button with .record-btn -->
          <button class="record-btn" onclick="analyzeSpeech(${index})" id="record-btn-${index}">
            <img src="recordsound-button.png" alt="Record" width="30">
          </button>

          <!-- Play button with .play-btn -->
          <button class="play-btn" onclick="playSpeech(${index})">
            <img src="playrecording-button.png" alt="Play" width="30">
          </button>
        </div>
      `;
      twistersContainer.appendChild(div);
      isRecording[index] = false;
    });

    // Request microphone access once at the beginning
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then(stream => {
        audioStream = stream;
      })
      .catch(error => console.error("Error accessing microphone:", error));
  }

  initGame();

  function analyzeSpeech(index) {
    if (isRecording[index]) {
      mediaRecorder.stop();
      if (recognition) {
        recognition.stop();
      }
      return;
    }

    if (!audioStream) {
      console.error("Microphone access not granted.");
      return;
    }

    mediaRecorder = new MediaRecorder(audioStream);
    audioChunks[index] = [];
    isRecording[index] = true;

    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.continuous = false;

    let userSpeech = "";

    recognition.onresult = event => {
      userSpeech = event.results[0][0].transcript.toLowerCase();
      console.log(`User said: "${userSpeech}"`);
    };

    recognition.onerror = event => {
      console.error("Speech recognition error:", event.error);
    };

    mediaRecorder.ondataavailable = event => {
      audioChunks[index].push(event.data);
    };

    mediaRecorder.onstop = () => {
      saveRecording(index);
      isRecording[index] = false;
      recognition.stop();
      processSpeech(index, userSpeech);
    };

    mediaRecorder.start();
    recognition.start();
    console.log(`Recording started for: ${tongueTwisters[index]}`);

    setTimeout(() => {
      if (isRecording[index]) {
        mediaRecorder.stop();
        recognition.stop();
      }
    }, 10000); // Automatically stop recording after 10 sec
  }

  function saveRecording(index) {
    const audioBlob = new Blob(audioChunks[index], { type: 'audio/wav' });
    recordings[index] = URL.createObjectURL(audioBlob);
    console.log(`Finished recording for: ${tongueTwisters[index]}`);
  }

  function playSpeech(index) {
    if (!recordings[index]) {
      console.log("No recording found.");
      return;
    }
    console.log(`Playing recorded speech for: ${tongueTwisters[index]}`);
    const audio = new Audio(recordings[index]);
    audio.play();
  }

  function processSpeech(index, userSpeech) {
    const originalTwister = tongueTwisters[index].toLowerCase();
    const accuracy = compareSpeech(userSpeech, originalTwister);

    // Update the twist-quote with the analysis result
    const twistQuote = document.querySelector(".twist-quote");

    // Choose message based on accuracy
    const message = accuracy < 50 ? "Keep going!" : "Nicely done!";

    twistQuote.innerHTML = `
      <span style="color: #FF4B4B; font-weight: bold;">
        ${message}
      </span><br>
      '${tongueTwisters[index]}'<br>
      is ${accuracy}% accurate.
    `;

    console.log(`Analysis complete: Accuracy score for '${tongueTwisters[index]}' is ${accuracy}%`);
  }

  function compareSpeech(userSpeech, originalTwister) {
    const userWords = userSpeech.split(" ");
    const originalWords = originalTwister.split(" ");
    let matchCount = 0;

    userWords.forEach((word, i) => {
      if (originalWords[i] && word === originalWords[i]) {
        matchCount++;
      }
    });

    return Math.round((matchCount / originalWords.length) * 100);
  }
</script>
