 <style>
    /* Reset basic body styling */
    body {
      margin: 0;
      padding: 0;
      background-color: #f8f8f8;
      font-family: Arial, sans-serif;
    }

    /* Back Button styling */
    .back-btn {
      display: flex;
      align-items: center;
      background-color: #f8f9fa;
      color: #333;
      border: none;
      padding: 8px 8px;
      font-size: 16px;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
      font-weight: bold;
      margin-bottom: 20px;
    }

    .back-btn:hover {
      background-color: #e0e0e0;
      transform: translateX(-3px);
    }

    .back-btn::before {
      content: "⮐";
      margin-right: 8px;
      font-size: 18px;
    }

    /* Page Header styling */
    .page-header {
      background-color: #FF7878;
      color: white;
      text-align: center;
      padding: 20px;
      border-radius: 25px;
      width: fit-content;
      margin: 0 auto;
    }

    .page-header h1 {
      margin: 0;
      font-weight: bold;
    }

    .page-header p {
      margin: 5px 0 0;
      font-style: italic;
      opacity: 0.75;
    }

    /* Main content container */
    .content {
      margin: 20px auto;
      text-align: center;
      max-width: 600px; /* Adjust as needed */
      width: 90%;
    }

    /* Book Selector */
    .custom-select {
      margin-bottom: 20px;
    }

    #bookSelector {
      width: 100%;
      max-width: 310px;
      border-radius: 10px;
      padding: 10px;
      font-size: 16px;
      text-align: center;
    }

    /* Book image and text */
    .book-image {
      width: 310px;
      height: auto;
      border-radius: 10px;
      margin-bottom: 10px;
    }

    .book-text {
      font-style: italic;
      font-size: 20px;
      line-height: 1.5;
      color: #002769;
      text-align: center;
      margin-top: 15px;
      margin-bottom: 20px;
    }

    /* Audio Buttons */
    .audio-buttons {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 15px;
      margin-bottom: 20px;
    }

    .audio-button {
      width: 50px;
      height: auto;
      cursor: pointer;
      border-radius: 5px;
      margin: 5px;
      padding: 8px;
      background-color: #2c3e50;
    }

    .audio-button:hover {
    background-color: #e0e0e0;
  }

  .custom-modal-overlay {
      display: none; /* hidden by default */
      position: fixed;
      z-index: 999; /* on top of everything */
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6); /* semi-transparent dark overlay */
  }
  .custom-modal {
      background-color: #fff;
      width: 300px; /* adjust as needed */
      margin: 15% auto; /* center vertically */
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
  }
  .custom-modal h2 {
      margin-top: 0;
      color: #2c3e50;
  }
  .custom-modal p {
      color: #333;
      margin-bottom: 20px;
  }
  .close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
  }
  .modal-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
  }
  .modal-ok-button:hover {
      background-color: #ff003c;
  }

  </style>

  <!-- Back Button -->
  <button onclick="loadPage('apraxiagameselection')" class="back-btn">Back to Apraxia Unit</button>

  <!-- Page Header -->
  <div class="page-header">
    <h1>Apraxia Unit - Book Reading</h1>
    <p>Stories for your Speech Journey</p>
  </div>

  <!-- Main Content -->
  <div class="content">
    <h2 id="readingTitle">Reading Time!</h2>
    <br>

    <div class="custom-select">
      <select id="bookSelector" aria-label="Select a Story">
        <option value="" disabled selected hidden>Select a Story</option>
        <option value="loveyouforever">Love You Forever</option>
        <option value="threeblindmice">Three Blind Mice</option>
      </select>
    </div>

    <img id="bookImage" src="placeholder-bookreading.png" class="book-image" alt="Book Cover">
    <p id="bookText" class="book-text"></p>

    <div class="audio-buttons" id="audioButtons" style="display: none;">
      <img src="recordsound-button.png" class="audio-button" alt="Record Sound">
      <img src="playrecording-button.png" class="audio-button" alt="Play Recording">
    </div>
  </div>

      <!-- Custom Modal (for styled alerts) -->
<div id="customModalOverlay" class="custom-modal-overlay">
  <div class="custom-modal">
    <button class="close-button" onclick="closeModal()">&times;</button>
    <h2 id="modalTitle">Modal Title</h2>
    <br>
    <p id="modalMessage">Modal message goes here.</p>
    <button class="modal-ok-button" onclick="closeModal()">OK</button>
  </div>
</div>

<script>
   // ====== Show & Hide Custom Modal ======
  function showModal(title, message) {
    document.getElementById("modalTitle").innerText = title;
    document.getElementById("modalMessage").innerText = message;
    document.getElementById("customModalOverlay").style.display = "block";
  }
  function closeModal() {
    document.getElementById("customModalOverlay").style.display = "none";
  }
  
let bookSelector = document.getElementById("bookSelector");
let bookImage = document.getElementById("bookImage");
let bookText = document.getElementById("bookText");
let audioButtons = document.getElementById("audioButtons");
let recordButton = document.querySelector(".audio-buttons img[alt='Record Sound']");
let playButton = document.querySelector(".audio-buttons img[alt='Play Recording']");

let mediaRecorder;
let audioChunks = [];
let recordings = {}; // Store recordings per book
let isRecording = false;
let transcript = "";

// Speech Recognition
let recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
recognition.continuous = false;
recognition.lang = "en-US";
recognition.interimResults = false;
recognition.maxAlternatives = 1;

// Request microphone access on page load
navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
    mediaRecorder = new MediaRecorder(stream);
    console.log("Microphone access granted.");
}).catch((error) => {
    console.error("Microphone access denied: ", error);
});

bookSelector.addEventListener("change", function() {
    if (bookSelector.value === "loveyouforever") {
        bookImage.src = "book-loveyouforever.png";
        bookText.innerHTML = `“ I’ll love you forever,<br>
                                I’ll like you for always,<br>
                                As long as I’m living<br>
                                my baby you’ll be. “`;
        audioButtons.style.display = "flex";
    } else if (bookSelector.value === "threeblindmice") {
        bookImage.src = "book-threeblindmice.png";
        bookText.innerHTML = `“ Three Blind Mice<br>
                                Three Blind Mice<br>
                                See how they run<br>
                                See how they run<br>
                                They all ran after the farmer’s wife<br>
                                She cut off their tails with a carving knife<br>
                                Did you ever see such a sight in your life<br>
                                as THREE BLIND MICE. ”`;
        audioButtons.style.display = "flex";
    } else {
        audioButtons.style.display = "none";
    }
});

// Recording Audio & Speech Recognition Together
recordButton.addEventListener("click", () => {
    if (!mediaRecorder) {
        console.error("Microphone access not available.");
        return;
    }
    let bookName = bookSelector.options[bookSelector.selectedIndex].text;
    
    if (isRecording) {
        mediaRecorder.stop();
        recognition.stop();
        return;
    }
    
    showModal(`Recording started for: ${bookName}`);
    
    audioChunks = [];
    isRecording = true;
    transcript = "";
    mediaRecorder.start();

    mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
    };

    mediaRecorder.onstop = () => {
        let audioBlob = new Blob(audioChunks, { type: "audio/webm" });
        let audioUrl = URL.createObjectURL(audioBlob);
        recordings[bookName] = audioUrl; // Store recording by book name
        isRecording = false;
        console.log(`Finished recording for: ${bookName}`);
        
        // Log User said after recording is finished
        console.log(`User said: ${transcript}`);
        
        // Analyze accuracy only after recording is fully stopped
        analyzeAccuracy(transcript, bookText.innerText, bookName);
    };
    
    recognition.start();
    recognition.onresult = (event) => {
        transcript = event.results[0][0].transcript;
    };
    
    setTimeout(() => {
        if (isRecording) {
            mediaRecorder.stop();
            recognition.stop();
        }
    }, 25000); // Stop after 25 seconds
});

// Playing back the recorded audio
playButton.addEventListener("click", () => {
    let bookName = bookSelector.options[bookSelector.selectedIndex].text;
    if (isRecording) {
        mediaRecorder.stop();
        recognition.stop();
    }
    if (recordings[bookName]) {
        let recordedAudio = new Audio(recordings[bookName]);
        recordedAudio.play();
    } else {
        showModal("No recording available for this book.", "Please record first!");
    }
});

// Analyzing speech accuracy
function analyzeAccuracy(userSpeech, referenceText, bookName) {
    if (!userSpeech) {
        console.log(`Analysis skipped: No speech detected for ${bookName}`);
        return;
    }
    let userWords = userSpeech.toLowerCase().split(" ");
    let referenceWords = referenceText.toLowerCase().split(" ");
    let correctCount = 0;
    
    userWords.forEach((word, index) => {
        if (word === referenceWords[index]) {
            correctCount++;
        }
    });
    
    let accuracy = (correctCount / referenceWords.length) * 100;
    console.log(`Analysis complete: Accuracy score for ${bookName} is ${accuracy.toFixed(2)}%`);
    showModal(`Your accuracy: ${accuracy.toFixed(2)}%`);
}

</script>
    